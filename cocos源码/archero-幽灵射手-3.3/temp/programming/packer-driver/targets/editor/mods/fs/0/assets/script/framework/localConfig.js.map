{"version":3,"sources":["file:///Users/ykq/Downloads/archero/assets/script/framework/localConfig.ts"],"names":["_decorator","resources","CSVManager","resourceUtil","ccclass","property","localConfig","Function","instance","_instance","loadConfig","cb","_callback","_loadCSV","loadDir","err","assets","arrCsvFiles","filter","item","_native","_cntLoad","length","forEach","index","array","getTextData","name","content","_csvManager","addTable","_tryToCallbackOnFinished","queryOne","tableName","key","value","queryByID","ID","getTable","getTableArr","queryAll","queryIn","values","queryByCondition","condition","_currentLoad"],"mappings":"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","sourcesContent":["import { _decorator, resources } from \"cc\";\nimport { CSVManager } from \"./csvManager\";\nimport { resourceUtil } from \"./resourceUtil\";\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"localConfig\")\nexport class localConfig {\n    /* class member could be defined like this */\n    private static _instance: localConfig;\n    private _csvManager: CSVManager = new CSVManager();\n\n    static get instance () {\n        if (this._instance) {\n            return this._instance;\n        }\n\n        this._instance = new localConfig();\n        return this._instance;\n    }\n\n    private _callback: Function = new Function();\n    private _currentLoad: number = 0;\n    private _cntLoad: number = 0;\n\n    /**\n     * 加载配置文件\n     * @param {Function}cb 回调函数 \n     */\n    public loadConfig (cb: Function) {\n        this._callback = cb;\n        this._loadCSV();\n    }\n\n    private _loadCSV () {\n        //新增数据表 请往该数组中添加....\n        resources.loadDir(\"datas\", (err: any, assets)=>{\n            if (err) {\n                return;\n            }\n\n            let arrCsvFiles = assets.filter((item: any)=>{\n                return item._native !== \".md\";\n            })\n\n            this._cntLoad = arrCsvFiles.length;\n    \n            //客户端加载\n            if (arrCsvFiles.length) {\n                arrCsvFiles.forEach((item, index, array)=> {\n                    resourceUtil.getTextData(item.name, (err: any, content: any) => {\n                        this._csvManager.addTable(item.name, content);\n                        this._tryToCallbackOnFinished();\n                    });\n                });\n            } else {\n                this._tryToCallbackOnFinished();\n            }\n        })        \n    }\n\n    /**\n     * 查询一条表内容\n     * @param {string} tableName 表名\n     * @param {string} key 列名\n     * @param {any} value 值\n     * @returns {Object} 一条表内容\n     */\n    queryOne (tableName: string, key: string, value: any) {\n        return this._csvManager.queryOne(tableName, key, value);\n    }\n\n    /**\n     * 根据ID查询一条表内容\n     * @param {string}tableName 表名\n     * @param {string}ID\n     * @returns {Object} 一条表内容\n     */\n    queryByID (tableName: string, ID: string) {\n        return this._csvManager.queryByID(tableName, ID);\n    }\n\n    /**\n     * 根据表名获取表的所有内容\n     * @param {string} tableName  表名\n     * @returns {object} 表内容\n     */\n    getTable (tableName: string) {\n        return this._csvManager.getTable(tableName);\n    }\n\n    /**\n     * 根据表名获取表的所有内容\n     * @param {string} tableName  表名\n     * @returns {object} 表内容\n     */\n    getTableArr (tableName: string) {\n        return this._csvManager.getTableArr(tableName);\n    }\n\n    /**\n     * 查询key和value对应的所有行内容\n     * @param {string} tableName 表名\n     * @param {string} key 列名\n     * @param {any} value 值\n     * @returns {Object}\n     */\n    queryAll (tableName: string, key: string, value: any) {\n        return this._csvManager.queryAll(tableName, key, value);\n    }\n\n    // \n    /**\n     * 选出指定表里所有 key 的值在 values 数组中的数据，返回 Object，key 为 ID\n     * @param {string} tableName 表名\n     * @param {string} key  列名\n     * @param {Array}values 数值\n     * @returns \n     */\n    queryIn (tableName: string, key: string, values: any[]) {\n        return this._csvManager.queryIn(tableName, key, values);\n    }\n\n    /**\n     * 选出符合条件的数据。condition key 为表格的key，value 为值的数组。返回的object，key 为数据在表格的ID，value为具体数据\n     * @param {string} tableName 表名\n     * @param {any} condition 筛选条件\n     * @returns \n     */\n    queryByCondition (tableName: string, condition: any) {\n        return this._csvManager.queryByCondition(tableName, condition);\n    }\n\n    private _tryToCallbackOnFinished () {\n        if (this._callback) {\n            this._currentLoad++;\n            if (this._currentLoad >= this._cntLoad) {\n                this._callback();\n            }\n        }\n    }\n}\n"]}