{"version":3,"sources":["file:///Users/ykq/Downloads/archero/assets/script/fight/characterRigid.ts"],"names":["ContactPoint","ContactPool","_decorator","Component","Vec3","RigidBodyComponent","EPSILON","ColliderComponent","constant","ccclass","property","v3_0","v3_1","assign","ce","c","isBodyA","getWorldNormalOnB","normal","getWorldPointOnA","point","getWorldNormalOnA","getWorldPointOnB","collider","_ctPool","getContacts","ces","cps","i","length","push","getContact","cp","pop","recyContacts","Array","prototype","call","CharacterRigid","UP","clone","velocity","_velocity","onGround","_grounded","onLoad","_rigidBody","getComponent","_collider","onEnable","on","_onCollision","onDisable","off","start","initSpeed","moveSpeed","ratio","_curMaxSpeed","move","x","z","_stateX","_stateZ","clearVelocity","stopMove","_updateCharacter","dt","updateFunction","set","normalize","negative","rigidMove","dir","speed","getLinearVelocity","scaleAndAdd","ms","len","lengthSqr","multiplyScalar","setLinearVelocity","_updateContactInfo","_applyGravity","_applyDamping","_saveState","GAME_FRAME","Math","pow","damping","g","gravity","m","mass","applyForce","_groundContact","wp","node","worldPosition","maxY","offsetY","_contacts","n","p","y","copy","_groundNormal","event","contacts","selfCollider","update","dtS"],"mappings":"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","sourcesContent":["import { constant } from '../framework/constant';\nimport { _decorator, Component, Vec3, RigidBodyComponent, EPSILON, ColliderComponent, ICollisionEvent, IContactEquation, Collider, RigidBody, PhysicsSystem } from 'cc';\n//角色刚体碰撞检测组件\nconst { ccclass, property } = _decorator;\nconst v3_0 = new Vec3();\nconst v3_1 = new Vec3();\n\nclass ContactPoint {\n    point = new Vec3();\n    normal = new Vec3();\n    collider!: Collider;\n    assign (ce: IContactEquation, c: Collider) {\n        if (ce.isBodyA) {\n            ce.getWorldNormalOnB(this.normal);\n            ce.getWorldPointOnA(this.point);\n        } else {\n            (ce as any).getWorldNormalOnA(this.normal);\n            ce.getWorldPointOnB(this.point);\n        }\n        this.collider = c;\n        return this;\n    }\n}\n\nconst _ctPool: ContactPoint[] = [];\nclass ContactPool {\n    static getContacts (ces: IContactEquation[], c: Collider, cps: ContactPoint[]) {\n        for (let i = 0; i < ces.length; i++) {\n            cps.push(this.getContact(ces[i], c));\n        }\n    }\n    static getContact (ce: IContactEquation, c: Collider): ContactPoint {\n        const cp = _ctPool.length > 0 ? _ctPool.pop()! : new ContactPoint();\n        return cp.assign(ce, c);\n    }\n    static recyContacts (cps: ContactPoint[]) {\n        Array.prototype.push.call(_ctPool, ...cps);\n        cps.length = 0;\n    }\n}\n\n@ccclass('CharacterRigid')\nexport class CharacterRigid extends Component {    \n    @property\n    public damping:number = 0.5;//阻尼\n\n    @property\n    public gravity:number = -10;//重力\n\n    private _rigidBody: RigidBodyComponent = null!;\n    private _collider: ColliderComponent = null!;\n    private _grounded = true;//是否着地\n    private _contacts: ContactPoint[] = [];//碰撞接触点\n    private _groundContact: ContactPoint = null!;//与地面碰撞的点\n    private _groundNormal = Vec3.UP.clone();//地面法向量\n    private _velocity = new Vec3();//线性速度\n    private _curMaxSpeed: number = 0;//当前最大速度\n\n    protected _stateX: number = 0;  // 1 positive, 0 static, -1 negative\n    protected _stateZ: number = 0;\n\n    get velocity () { return this._velocity; }\n    get onGround () { return this._grounded; }\n\n    onLoad () {\n        this._rigidBody = this.getComponent(RigidBodyComponent)!;\n        this._collider = this.getComponent(ColliderComponent)!;\n    }\n\n    onEnable () {\n        this._collider.on('onCollisionEnter', this._onCollision, this);\n        this._collider.on('onCollisionStay', this._onCollision, this);\n        this._collider.on('onCollisionExit', this._onCollision, this);\n    }\n\n    onDisable () {\n        this._collider.off('onCollisionEnter', this._onCollision, this);\n        this._collider.off('onCollisionStay', this._onCollision, this);\n        this._collider.off('onCollisionExit', this._onCollision, this);\n    }\n\n    start () {\n      \n    }\n\n    public initSpeed (moveSpeed: number,  ratio: number = 1) {\n        this._curMaxSpeed = moveSpeed * ratio;\n    }\n\n    /**\n     * 角色移动传入x和z\n     *\n     * @param {number} x\n     * @param {number} z\n     */\n    public move (x: number, z: number) {\n        if ((x > 0 && this._stateX < 0) || (x < 0 && this._stateX > 0) || (z > 0 && this._stateZ < 0) || (z < 0 && this._stateZ > 0)) {\n            this.clearVelocity();\n            // console.log(\"方向不一致则清除速度,避免惯性太大\");\n        }\n\n        this._stateX = x;\n        this._stateZ = z;\n        // console.log(\"_stateX\", this._stateX, \"z\", this._stateZ);\n    }\n\n    /**\n     * 刚体停止移动\n     *\n     */\n    public stopMove () {\n        this._stateX = 0;\n        this._stateZ = 0;\n        this.clearVelocity();\n    }\n\n    /**\n     * 更新刚体状态\n     *\n     * @private\n     * @param {number} dt\n     * @return {*} \n     */\n    private _updateCharacter (dt: number) {\n        this.updateFunction(dt);\n\n        if (!this.onGround) return;\n        if (this._stateX || this._stateZ) {\n            v3_0.set(this._stateX, 0, this._stateZ);\n            v3_0.normalize().negative();\n            this.rigidMove(v3_0, 1);\n        }\n    }\n\n    /**\n     * 清除移动速度\n     */\n    public clearVelocity () {\n        this._rigidBody.clearVelocity();\n    }\n\n    /**\n     * 刚体移动\n     *\n     * @param {Vec3} dir\n     * @param {number} speed\n     */\n    public rigidMove (dir: Vec3, speed: number) {\n        this._rigidBody.getLinearVelocity(v3_1);\n        Vec3.scaleAndAdd(v3_1, v3_1, dir, speed);\n\n        const ms = this._curMaxSpeed;\n        const len = v3_1.lengthSqr();\n        if (len > ms) {\n            v3_1.normalize();\n            v3_1.multiplyScalar(ms);\n        }\n        this._rigidBody.setLinearVelocity(v3_1);\n\n        // console.log('setLinearVelocity1' + v3_1);\n    }\n\n    /**\n     * 刷新\n     * @param dt \n     */\n    public updateFunction (dt: number) {\n        // if (GameManager.isGameStart && !GameManager.isGameOver && !GameManager.isGamePause) {\n            this._updateContactInfo();\n            this._applyGravity();\n            this._applyDamping();\n            this._saveState();\n        // }\n    }\n\n    /**\n     * 施加阻尼\n     *\n     * @private\n     * @param {number} [dt=1 / constant.GAME_FRAME]\n     */\n    private _applyDamping (dt = 1 / constant.GAME_FRAME) {\n        this._rigidBody.getLinearVelocity(v3_1);\n        // console.log('getLinearVelocity2' + v3_1);\n        if (v3_1.lengthSqr() > EPSILON) {\n            v3_1.multiplyScalar(Math.pow(1.0 - this.damping, dt));\n            this._rigidBody.setLinearVelocity(v3_1);\n            // console.log('setLinearVelocity2' + v3_1);\n        }\n    }\n\n    /**\n     * 施加重力\n     *\n     * @private\n     */\n    private _applyGravity () {\n        const g = this.gravity;\n        const m = this._rigidBody.mass;\n        v3_1.set(0, m * g, 0);\n        this._rigidBody.applyForce(v3_1)\n    }\n\n    /**\n     * 获取线性速度\n     *\n     * @private\n     */\n    private _saveState () {\n        this._rigidBody.getLinearVelocity(this._velocity);\n        // console.log('getLinearVelocity3' + this._velocity  + \":\" + this._grounded);\n    }\n\n    /**\n     * 更新碰撞信息，判断是否角色着地\n     *\n     * @private\n     */\n    private _updateContactInfo () {\n        this._grounded = false;\n        this._groundContact = null!;\n        const wp = this.node.worldPosition;\n        let maxY = -0.001;\n        let offsetY = 0.5;//默认为0.1\n        for (let i = 0; i < this._contacts.length; i++) {\n            const c = this._contacts[i];\n            const n = c.normal, p = c.point;\n            if (n.y <= 0.0001) continue;\n            else {\n                if (n.y > maxY && p.y > wp.y - offsetY) {\n                    this._grounded = true;\n                    maxY = n.y;\n                    this._groundContact = c;\n                }\n            }\n        }\n        if (this._grounded) {\n            Vec3.copy(this._groundNormal, this._groundContact.normal);\n        } else {\n            Vec3.copy(this._groundNormal, Vec3.UP);\n            // console.log(\"没着地\", this.node.name);\n        }\n        ContactPool.recyContacts(this._contacts);\n    }\n\n    /**\n     * 检测碰撞，收集碰撞信息\n     *\n     * @private\n     * @param {ICollisionEvent} event\n     */\n    private _onCollision (event: ICollisionEvent) {\n        ContactPool.getContacts(event.contacts, event.selfCollider, this._contacts);\n    }\n\n    update (dtS: number) {\n        const dt = 1000 / constant.GAME_FRAME;\n        this._updateCharacter(dt);\n    }\n}"]}