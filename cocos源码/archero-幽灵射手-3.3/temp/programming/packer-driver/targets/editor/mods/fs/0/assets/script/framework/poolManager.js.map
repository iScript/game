{"version":3,"sources":["file:///Users/ykq/Downloads/archero/assets/script/framework/poolManager.ts"],"names":["_decorator","instantiate","NodePool","ccclass","property","poolManager","instance","_instance","getNode","prefab","parent","name","position","data","_dictPrefab","node","_dictPool","hasOwnProperty","pool","size","get","active","putNode","put","clearPool","clear"],"mappings":";;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAA0BC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,Q,OAAAA,Q;;;;;;;OAC1C;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;6BAGjBK,W,WADZF,OAAO,CAAC,aAAD,C,mCAAR,MACaE,WADb,CACyB;AAAA;AAAA,6CAQI,EARJ;;AAAA,+CASM,EATN;AAAA;;AAYrB;AACA;;AAEA;AACA;AACA;AAEmB,mBAARC,QAAQ,GAAI;AACnB,cAAI,KAAKC,SAAT,EAAoB;AAChB,mBAAO,KAAKA,SAAZ;AACH;;AAED,eAAKA,SAAL,GAAiB,IAAIF,WAAJ,EAAjB;AACA,iBAAO,KAAKE,SAAZ;AACH;AAED;AACJ;AACA;;;AACWC,QAAAA,OAAO,CAAEC,MAAF,EAAkBC,MAAlB,EAAgC;AAC1C,cAAIC,IAAI,GAAGF,MAAM,CAACE,IAAlB,CAD0C,CAEzC;;AACA,cAAI,CAACF,MAAM,CAACG,QAAZ,EAAsB;AACnB;AACAD,YAAAA,IAAI,GAAGF,MAAM,CAACI,IAAP,CAAYF,IAAnB;AACH;;AAED,eAAKG,WAAL,CAAiBH,IAAjB,IAAyBF,MAAzB;AACA,cAAIM,IAAI,GAAG,IAAX;;AACA,cAAI,KAAKC,SAAL,CAAeC,cAAf,CAA8BN,IAA9B,CAAJ,EAAyC;AACrC;AACA,gBAAIO,IAAI,GAAG,KAAKF,SAAL,CAAeL,IAAf,CAAX;;AACA,gBAAIO,IAAI,CAACC,IAAL,KAAc,CAAlB,EAAqB;AACjBJ,cAAAA,IAAI,GAAGG,IAAI,CAACE,GAAL,EAAP;AACH,aAFD,MAEO;AACHL,cAAAA,IAAI,GAAGd,WAAW,CAACQ,MAAD,CAAlB;AACH;AACJ,WARD,MAQO;AACH;AACA,gBAAIS,IAAI,GAAG,IAAIhB,QAAJ,EAAX;AACA,iBAAKc,SAAL,CAAeL,IAAf,IAAuBO,IAAvB;AAEAH,YAAAA,IAAI,GAAGd,WAAW,CAACQ,MAAD,CAAlB;AACH;;AAEDM,UAAAA,IAAI,CAACL,MAAL,GAAcA,MAAd;AACAK,UAAAA,IAAI,CAACM,MAAL,GAAc,IAAd;AACA,iBAAON,IAAP;AACH;AAED;AACJ;AACA;;;AACWO,QAAAA,OAAO,CAAEP,IAAF,EAAc;AACxB,cAAI,CAACA,IAAL,EAAW;AACP;AACH;;AACD,cAAIJ,IAAI,GAAGI,IAAI,CAACJ,IAAhB;AACA,cAAIO,IAAI,GAAG,IAAX;;AACA,cAAI,KAAKF,SAAL,CAAeC,cAAf,CAA8BN,IAA9B,CAAJ,EAAyC;AACrC;AACAO,YAAAA,IAAI,GAAG,KAAKF,SAAL,CAAeL,IAAf,CAAP;AACH,WAHD,MAGO;AACH;AACAO,YAAAA,IAAI,GAAG,IAAIhB,QAAJ,EAAP;AACA,iBAAKc,SAAL,CAAeL,IAAf,IAAuBO,IAAvB;AACH;;AAEDA,UAAAA,IAAI,CAACK,GAAL,CAASR,IAAT;AACH;AAED;AACJ;AACA;;;AACWS,QAAAA,SAAS,CAAEb,IAAF,EAAgB;AAC5B,cAAI,KAAKK,SAAL,CAAeC,cAAf,CAA8BN,IAA9B,CAAJ,EAAyC;AACrC,gBAAIO,IAAI,GAAG,KAAKF,SAAL,CAAeL,IAAf,CAAX;AACAO,YAAAA,IAAI,CAACO,KAAL;AACH;AACJ,SA3FoB,CA6FrB;AACA;AACA;;;AA/FqB,O","sourcesContent":["import { _decorator, Prefab, Node, instantiate, NodePool } from \"cc\";\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"poolManager\")\nexport class poolManager {\n    /* class member could be defined like this */\n    // dummy = '';\n\n    /* use `property` decorator if your want the member to be serializable */\n    // @property\n    // serializableDummy = 0;\n\n    private _dictPool: any = {}\n    private _dictPrefab: any = {}\n\n    static _instance: poolManager;\n    /* class member could be defined like this */\n    // dummy = '';\n\n    /* use `property` decorator if your want the member to be serializable */\n    // @property\n    // serializableDummy = 0;\n\n    static get instance () {\n        if (this._instance) {\n            return this._instance;\n        }\n\n        this._instance = new poolManager();\n        return this._instance;\n    }\n\n    /**\n     * 根据预设从对象池中获取对应节点\n     */\n    public getNode (prefab: Prefab, parent: Node) {\n        let name = prefab.name;\n         //@ts-ignore\n         if (!prefab.position) {\n            //@ts-ignore\n            name = prefab.data.name;\n        }\n        \n        this._dictPrefab[name] = prefab;\n        let node = null;\n        if (this._dictPool.hasOwnProperty(name)) {\n            //已有对应的对象池\n            let pool = this._dictPool[name];\n            if (pool.size() > 0) {\n                node = pool.get();\n            } else {\n                node = instantiate(prefab);\n            }\n        } else {\n            //没有对应对象池，创建他！\n            let pool = new NodePool();\n            this._dictPool[name] = pool;\n\n            node = instantiate(prefab);\n        }\n\n        node.parent = parent;\n        node.active = true;\n        return node;\n    }\n\n    /**\n     * 将对应节点放回对象池中\n     */\n    public putNode (node: Node) {\n        if (!node) {\n            return;\n        }\n        let name = node.name; \n        let pool = null;\n        if (this._dictPool.hasOwnProperty(name)) {\n            //已有对应的对象池\n            pool = this._dictPool[name];\n        } else {\n            //没有对应对象池，创建他！\n            pool = new NodePool();\n            this._dictPool[name] = pool;\n        }\n\n        pool.put(node);\n    }\n\n    /**\n     * 根据名称，清除对应对象池\n     */\n    public clearPool (name: string) {\n        if (this._dictPool.hasOwnProperty(name)) {\n            let pool = this._dictPool[name];\n            pool.clear();\n        }\n    }\n\n    // update (deltaTime: number) {\n    //     // Your update function goes here.\n    // }\n}\n"]}