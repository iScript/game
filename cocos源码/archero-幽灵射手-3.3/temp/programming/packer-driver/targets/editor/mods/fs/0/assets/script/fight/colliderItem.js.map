{"version":3,"sources":["file:///Users/ykq/Downloads/archero/assets/script/fight/colliderItem.ts"],"names":["_decorator","Component","Quat","MeshColliderComponent","BoxColliderComponent","CylinderColliderComponent","Enum","CapsuleColliderComponent","poolManager","playerData","uiManager","Monster","GameManager","constant","Arrow","ccclass","property","COLLIDER_NAME","ARROW","HEART_BIG","WARP_GATE","NPC_BUSINESS_MAN","NPC_WISE_MAN","HEART_SMALL","ColliderItem","type","displayOrder","timer","obj","_timer","clearTimeout","onLoad","colliderCom","node","getComponent","console","error","onEnable","isTrigger","on","_onTriggerEnterCb","_onCollisionEnterCb","onDisable","off","start","init","event","_hitTarget","otherCollider","selfCollider","isGameOver","isGameStart","getGroup","PHY_GROUP","PLAYER","ndPlayer","colliderName","scriptPlayer","addBlood","instance","putNode","checkTriggerAll","scriptCharacterRigid","stopMove","isWin","isGamePause","scriptPlayerModel","playAni","PLAYER_ANI_TYPE","IDLE","isPlayerSkillAllUnlock","showTips","hideDialog","showDialog","PRIORITY","DIALOG","OBSTACLE","scriptArrow","hideArrow","warn","MONSTER","ndMonster","scriptMonster","isArrowLaunch","playArrowLaunch","isArrowPenetrate","playHit","name","changeDragonMat","update","deltaTime","parent","fromEuler","_curHeartBigQuat","rotate"],"mappings":"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","sourcesContent":["import { poolManager } from './../framework/poolManager';\nimport { playerData } from './../framework/playerData';\nimport { uiManager } from './../framework/uiManager';\nimport { Monster } from './monster';\nimport { GameManager } from './gameManager';\nimport { _decorator, Component, Quat, MeshColliderComponent, Node, BoxColliderComponent, CylinderColliderComponent, ITriggerEvent, Vec3, Enum, AnimationComponent, CapsuleColliderComponent, ICollisionEvent, math } from 'cc';\nimport { constant } from '../framework/constant';\nimport { Arrow } from './arrow';\n//碰撞器组件\n\nconst { ccclass, property } = _decorator;\n\nconst COLLIDER_NAME = Enum ({\n    ARROW: 1,//弓箭\n    HEART_BIG: 2,//大爱心, 玩家吃到后增加生命上限\n    WARP_GATE: 3,//传送门\n    NPC_BUSINESS_MAN: 4,//NPC商人\n    NPC_WISE_MAN: 5,//NPC智慧老头\n    HEART_SMALL: 6,//小爱心, 敌人掉落的爱心 \n})\n\n//管理障碍类型\n@ccclass('ColliderItem')\nexport class ColliderItem extends Component {\n    @property({\n        type: COLLIDER_NAME,\n        displayOrder: 1\n    })\n    public colliderName: any = COLLIDER_NAME.ARROW;//碰撞体类型名称\n\n    public colliderCom: any = null;\n    public ani: AnimationComponent = null!;\n    \n    public set timer (obj: any) {\n        if (this._timer) {\n            clearTimeout(this._timer);\n            this._timer = null;\n        }\n    }\n    \n    public static COLLIDER_NAME = COLLIDER_NAME;\n\n    private _curHeartBigQuat: Quat = new Quat();//爱心旋转\n    private _timer: any = null;//定时器\n\n    onLoad () {\n        this.colliderCom = this.node.getComponent(BoxColliderComponent) || this.node.getComponent(CylinderColliderComponent) || this.node.getComponent(CapsuleColliderComponent) || this.node.getComponent(MeshColliderComponent);\n\n        if (!this.colliderCom) {\n            console.error(\"this node does not have collider component\");\n        }\n    }\n\n    onEnable () {\n        if (this.colliderCom.isTrigger) {\n            this.colliderCom.on('onTriggerEnter', this._onTriggerEnterCb, this);\n        } else {\n            this.colliderCom.on('onCollisionEnter', this._onCollisionEnterCb, this);\n        }\n    }\n\n    onDisable () {\n        if (this.colliderCom.isTrigger) {\n            this.colliderCom.off('onTriggerEnter', this._onTriggerEnterCb, this);\n        } else {\n            this.colliderCom.off('onCollisionEnter', this._onCollisionEnterCb, this);\n        }\n    }\n\n    start () {\n    }\n\n    /**\n     * 初始化\n     */\n    public init () {\n\n    }   \n\n    private _onTriggerEnterCb (event: ITriggerEvent) {\n       this._hitTarget(event.otherCollider, event.selfCollider);\n    }\n\n    private _onCollisionEnterCb (event: ICollisionEvent) {\n       this._hitTarget(event.otherCollider, event.selfCollider);\n    }\n\n    private _hitTarget (otherCollider: any, selfCollider: any) {\n        if (GameManager.isGameOver || !GameManager.isGameStart) {\n            return;\n        }\n\n        // console.log(\"getGroup\", otherCollider.getGroup());\n\n        if (otherCollider.getGroup() == constant.PHY_GROUP.PLAYER  && GameManager.ndPlayer) {\n            switch (this.colliderName) {\n                case COLLIDER_NAME.HEART_BIG:\n                    GameManager.scriptPlayer.addBlood(300);\n                    poolManager.instance.putNode(this.node);\n                    GameManager.checkTriggerAll();\n                    break;\n                case COLLIDER_NAME.WARP_GATE:\n                    GameManager.scriptPlayer.scriptCharacterRigid.stopMove();\n                    GameManager.isWin = true;\n                    break;\n                case COLLIDER_NAME.NPC_BUSINESS_MAN:\n                    GameManager.isGamePause = true;\n                    GameManager.scriptPlayer.scriptCharacterRigid.stopMove();\n                    GameManager.scriptPlayer.scriptPlayerModel.playAni(constant.PLAYER_ANI_TYPE.IDLE, true);\n                    if (playerData.instance.isPlayerSkillAllUnlock) {\n                        //防错\n                        uiManager.instance.showTips(\"所有技能均已解锁\");\n                        poolManager.instance.putNode(this.node);\n                        GameManager.isGamePause = false;\n                    } else {\n                        uiManager.instance.hideDialog(\"fight/fightPanel\");\n                        uiManager.instance.showDialog(\"shop/shopPanel\", [()=>{\n                            GameManager.isGamePause = false;\n                            poolManager.instance.putNode(this.node);\n                        }], ()=>{}, constant.PRIORITY.DIALOG);\n                    }\n\n                    GameManager.checkTriggerAll();\n                    break;\n                case COLLIDER_NAME.NPC_WISE_MAN:\n                    GameManager.isGamePause = true;\n                    GameManager.scriptPlayer.scriptCharacterRigid.stopMove();\n                    GameManager.scriptPlayer.scriptPlayerModel.playAni(constant.PLAYER_ANI_TYPE.IDLE, true);\n                    if (playerData.instance.isPlayerSkillAllUnlock) {\n                        uiManager.instance.showTips(\"所有技能均已解锁\");\n                        poolManager.instance.putNode(this.node);\n                        GameManager.isGamePause = false;\n                    } else {\n                        uiManager.instance.hideDialog(\"fight/fightPanel\");\n                        uiManager.instance.showDialog(\"skill/skillPanel\", [()=>{\n                            poolManager.instance.putNode(this.node);\n                            GameManager.isGamePause = false;\n                        }], ()=>{}, constant.PRIORITY.DIALOG);\n                    }\n\n                    GameManager.checkTriggerAll();\n                    break;\n            }\n\n        } else if (otherCollider.getGroup() === constant.PHY_GROUP.OBSTACLE) {\n            //箭碰到游戏中的障碍则回收\n            switch (this.colliderName) {\n                case COLLIDER_NAME.ARROW:\n                    let scriptArrow = this.node.getComponent(Arrow) as Arrow;\n\n                    // if (!GameManager.scriptPlayer.isArrowRebound) {\n                        scriptArrow.hideArrow();\n                    // } else {\n                    //     if (scriptArrow.arrowReboundTimes < 2) {\n                    //         scriptArrow.playArrowRebound(selfCollider.node, otherCollider.node);\n                    //     } else {\n                    //         scriptArrow.hideArrow();\n                    //     }\n                    // }\n                    break;\n                default:\n                    console.warn(\"colliderName not found\", this.colliderName);\n                    break;\n            }\n        } else if (otherCollider.getGroup() === constant.PHY_GROUP.MONSTER) {\n            //箭碰到敌人\n            switch (this.colliderName) {\n                case COLLIDER_NAME.ARROW:\n                    let ndMonster = otherCollider.node as Node;\n                    let scriptMonster = ndMonster.getComponent(Monster) as Monster;\n                    let scriptArrow = this.node.getComponent(Arrow) as Arrow;\n\n                    //箭是否弹射\n                    if (GameManager.scriptPlayer.isArrowLaunch) {\n                        if (!scriptArrow.isArrowLaunch) {\n                            //第一次弹射\n                            scriptArrow.playArrowLaunch(ndMonster);\n                        } else {\n                            //第二次直接隐藏\n                            scriptArrow.hideArrow();\n                        }\n                    } else if (GameManager.scriptPlayer.isArrowPenetrate) {\n                        //箭穿透\n                    } else {\n                        scriptArrow.hideArrow();\n                    }\n\n                    scriptMonster.playHit(scriptArrow.isArrowLaunch);\n\n                    //龙被射到龙改变颜色\n                    if (ndMonster.name === \"dragon\") {\n                        //@ts-ignore\n                        scriptMonster.changeDragonMat();\n                    }\n                    break;\n                default:\n                    console.warn(\"colliderName not found\", this.colliderName);\n                    break;\n            }\n        } \n    }\n\n    update (deltaTime: number) {\n        if (GameManager.isGameOver || !GameManager.ndPlayer || !this.node.parent) {\n            return;    \n        }\n\n        if (this.colliderName === COLLIDER_NAME.HEART_BIG) {\n            Quat.fromEuler(this._curHeartBigQuat, 0, 120 * deltaTime, 0);\n            this.node.rotate(this._curHeartBigQuat);\n        }\n\n    }\n}\n\n"]}