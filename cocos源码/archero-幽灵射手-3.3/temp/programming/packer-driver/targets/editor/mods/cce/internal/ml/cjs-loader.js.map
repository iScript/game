{"version":3,"sources":["cce:/internal/ml/cjs-loader.mjs"],"names":["CjsLoader","constructor","_namedWrappers","_resolveCache","_moduleCache","define","id","wrapper","require","_require","createRequireWithReqMap","requireMap","originalRequire","specifier","resolved","Error","throwInvalidWrapper","requestTarget","from","parent","cachedModule","exports","module","_tryModuleLoad","_resolve","_resolveFromInfos","_throwUnresolved","cjsInfos","resolveCache","undefined","threw","_load","_loadWrapper","_createRequire","_loadExternalWrapper","path","URL","fileURLToPath","err","extern","Object","assign","parentUrl"],"mappings":";;;MAAMA,S;;;;AAAAA,MAAAA,S,GAAN,MAAMA,SAAN,CAAgB;AACZC,QAAAA,WAAW,GAAG;AACV,eAAKC,cAAL,GAAsB,EAAtB;AACA,eAAKC,aAAL,GAAqB,EAArB;AACA,eAAKC,YAAL,GAAoB,EAApB;AACH;;AAEDC,QAAAA,MAAM,CAACC,EAAD,EAAKC,OAAL,EAAc;AAChB,eAAKL,cAAL,CAAoBI,EAApB,IAA0BC,OAA1B;AACH;;AAEDC,QAAAA,OAAO,CAACF,EAAD,EAAK;AACR,iBAAO,KAAKG,QAAL,CAAcH,EAAd,CAAP;AACH;;AAEDI,QAAAA,uBAAuB,CAACC,UAAD,EAAaC,eAAb,EAA8B;AACjD,iBAAQC,SAAD,IAAe;AAClB,kBAAMC,QAAQ,GAAGH,UAAU,CAACE,SAAD,CAA3B;;AACA,gBAAIC,QAAJ,EAAc;AACV,qBAAOF,eAAe,CAACE,QAAD,CAAtB;AACH,aAFD,MAEO;AACH,oBAAM,IAAIC,KAAJ,CAAU,0BAA0BF,SAApC,CAAN;AACH;AACJ,WAPD;AAQH;;AAEDG,QAAAA,mBAAmB,CAACC,aAAD,EAAgBC,IAAhB,EAAsB;AACrC,gBAAM,IAAIH,KAAJ,CAAW,WAAUE,aAAc,oBAAmBC,IAAK,iEAA3D,CAAN;AACH;;AAEDT,QAAAA,QAAQ,CAACH,EAAD,EAAKa,MAAL,EAAa;AACjB,gBAAMC,YAAY,GAAG,KAAKhB,YAAL,CAAkBE,EAAlB,CAArB;;AACA,cAAIc,YAAJ,EAAkB;AACd,mBAAOA,YAAY,CAACC,OAApB;AACH;;AAED,gBAAMC,MAAM,GAAG;AAAEhB,YAAAA,EAAF;AAAMe,YAAAA,OAAO,EAAE;AAAf,WAAf;AACA,eAAKjB,YAAL,CAAkBE,EAAlB,IAAwBgB,MAAxB;;AACA,eAAKC,cAAL,CAAoBD,MAApB,EAA4BhB,EAA5B;;AACA,iBAAOgB,MAAM,CAACD,OAAd;AACH;;AAEDG,QAAAA,QAAQ,CAACX,SAAD,EAAYM,MAAZ,EAAoB;AACxB,iBAAO,KAAKM,iBAAL,CAAuBZ,SAAvB,EAAkCM,MAAlC,KAA6C,KAAKO,gBAAL,CAAsBb,SAAtB,EAAiCM,MAAjC,CAApD;AACH;;AAEDM,QAAAA,iBAAiB,CAACZ,SAAD,EAAYM,MAAZ,EAAoB;AAAA;;AACjC,cAAIN,SAAS,IAAIc,QAAjB,EAA2B;AACvB,mBAAOd,SAAP;AACH;;AACD,cAAI,CAACM,MAAL,EAAa;AACT;AACH;;AACD,8DAAOQ,QAAQ,CAACR,MAAD,CAAf,qDAAO,iBAAkBS,YAAlB,CAA+Bf,SAA/B,CAAP,yEAAoDgB,SAApD;AACH;;AAEDN,QAAAA,cAAc,CAACD,MAAD,EAAShB,EAAT,EAAa;AACvB,cAAIwB,KAAK,GAAG,IAAZ;;AACA,cAAI;AACA,iBAAKC,KAAL,CAAWT,MAAX,EAAmBhB,EAAnB;;AACAwB,YAAAA,KAAK,GAAG,KAAR;AACH,WAHD,SAGU;AACN,gBAAIA,KAAJ,EAAW;AACP,qBAAO,KAAK1B,YAAL,CAAkBE,EAAlB,CAAP;AACH;AACJ;AACJ;;AAEDyB,QAAAA,KAAK,CAACT,MAAD,EAAShB,EAAT,EAAa;AACd,gBAAMC,OAAO,GAAG,KAAKyB,YAAL,CAAkB1B,EAAlB,CAAhB;;AACA,gBAAME,OAAO,GAAG,KAAKyB,cAAL,CAAoBX,MAApB,CAAhB;;AACAf,UAAAA,OAAO,CAACe,MAAM,CAACD,OAAR,EAAiBb,OAAjB,EAA0Bc,MAA1B,CAAP;AACH;;AAEDU,QAAAA,YAAY,CAAC1B,EAAD,EAAK;AACb,cAAIA,EAAE,IAAI,KAAKJ,cAAf,EAA+B;AAC3B,mBAAO,KAAKA,cAAL,CAAoBI,EAApB,CAAP;AACH,WAFD,MAEO;AACH,mBAAO,KAAK4B,oBAAL,CAA0B5B,EAA1B,CAAP;AACH;AACJ;;AAED4B,QAAAA,oBAAoB,CAAC5B,EAAD,EAAK;AACrB,iBAAQe,OAAD,IAAa;AAChB,gBAAIc,IAAJ;;AACA,gBAAI;AACAA,cAAAA,IAAI,GAAGC,GAAG,CAACC,aAAJ,CAAkB/B,EAAlB,CAAP;AACH,aAFD,CAEE,OAAOgC,GAAP,EAAY;AACV,oBAAM,IAAIvB,KAAJ,CAAW,GAAET,EAAG,0BAAhB,CAAN;AACH;;AACD,kBAAMiC,MAAM,GAAG/B,OAAO,CAAC2B,IAAD,CAAtB;;AACAK,YAAAA,MAAM,CAACC,MAAP,CAAcpB,OAAd,EAAuBkB,MAAvB;AACH,WATD;AAUH;;AAEDN,QAAAA,cAAc,CAACX,MAAD,EAAS;AACnB,iBAAQT,SAAD,IAAe,KAAKJ,QAAL,CAAcI,SAAd,EAAyBS,MAAzB,CAAtB;AACH;;AAEDI,QAAAA,gBAAgB,CAACb,SAAD,EAAY6B,SAAZ,EAAuB;AACnC,gBAAM,IAAI3B,KAAJ,CAAW,qBAAoBF,SAAU,SAAQM,MAAO,GAAxD,CAAN;AACH;;AArGW,O;;yBAwGD,IAAInB,SAAJ,E","sourcesContent":["class CjsLoader {\n    constructor() {\n        this._namedWrappers = {};\n        this._resolveCache = {};\n        this._moduleCache = {};\n    }\n\n    define(id, wrapper) {\n        this._namedWrappers[id] = wrapper;\n    }\n\n    require(id) {\n        return this._require(id);\n    }\n\n    createRequireWithReqMap(requireMap, originalRequire) {\n        return (specifier) => {\n            const resolved = requireMap[specifier];\n            if (resolved) {\n                return originalRequire(resolved);\n            } else {\n                throw new Error('Unresolved specifier ' + specifier);\n            }\n        };\n    }\n\n    throwInvalidWrapper(requestTarget, from) {\n        throw new Error(`Module '${requestTarget}' imported from '${from}' is expected be an ESM-wrapped CommonJS module but it doesn't.`);\n    }\n\n    _require(id, parent) {\n        const cachedModule = this._moduleCache[id];\n        if (cachedModule) {\n            return cachedModule.exports;\n        }\n\n        const module = { id, exports: {} };\n        this._moduleCache[id] = module;\n        this._tryModuleLoad(module, id);\n        return module.exports;\n    }\n\n    _resolve(specifier, parent) {\n        return this._resolveFromInfos(specifier, parent) || this._throwUnresolved(specifier, parent);\n    }\n\n    _resolveFromInfos(specifier, parent) {\n        if (specifier in cjsInfos) {\n            return specifier;\n        }\n        if (!parent) {\n            return;\n        }\n        return cjsInfos[parent]?.resolveCache[specifier] ?? undefined;\n    }\n\n    _tryModuleLoad(module, id) {\n        let threw = true;\n        try {\n            this._load(module, id);\n            threw = false;\n        } finally {\n            if (threw) {\n                delete this._moduleCache[id];\n            }\n        }\n    }\n\n    _load(module, id) {\n        const wrapper = this._loadWrapper(id);\n        const require = this._createRequire(module);\n        wrapper(module.exports, require, module);\n    }\n\n    _loadWrapper(id) {\n        if (id in this._namedWrappers) {\n            return this._namedWrappers[id];\n        } else {\n            return this._loadExternalWrapper(id);\n        }\n    }\n\n    _loadExternalWrapper(id) {\n        return (exports) => {\n            let path;\n            try {\n                path = URL.fileURLToPath(id);\n            } catch (err) {\n                throw new Error(`${id} is not a valid file URL`);\n            }\n            const extern = require(path);\n            Object.assign(exports, extern);\n        };\n    }\n\n    _createRequire(module) {\n        return (specifier) => this._require(specifier, module);\n    }\n\n    _throwUnresolved(specifier, parentUrl) {\n        throw new Error(`Unable to resolve ${specifier} from ${parent}.`);\n    }\n}\n\nexport default new CjsLoader();\n"]}