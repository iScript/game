{"version":3,"sources":["file:///Users/ykq/Downloads/archero/assets/script/fight/verticalRaycast.ts"],"names":["_decorator","Component","director","Director","PhysicsSystem","geometry","Vec3","physics","ccclass","property","tmpRay","Ray","create","VerticalRaycast","type","PhysicsGroup","start","on","EVENT_AFTER_PHYSICS","raycast","pos","node","worldPosition","offsetY","y","copy","o","instance","raycastClosest","group","raycastClosestResult","hitPoint"],"mappings":";;;;;;;;;;;;;;;;AACSA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAiBC,MAAAA,Q,OAAAA,Q;AAAUC,MAAAA,Q,OAAAA,Q;AAAUC,MAAAA,a,OAAAA,a;AAAeC,MAAAA,Q,OAAAA,Q;AAAUC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,O,OAAAA,O;;;;;;;OACnF;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBT,U;AACxBU,MAAAA,M,GAASL,QAAQ,CAACM,GAAT,CAAaC,MAAb,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,EAAgC,CAAC,CAAjC,EAAoC,CAApC,C;;iCAEFC,e,WADZL,OAAO,CAAC,iBAAD,C,UAGHC,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAEP,OAAO,CAACQ;AAAhB,OAAD,C,oCAHb,MACaF,eADb,SACqCZ,SADrC,CAC+C;AAAA;AAAA;;AAAA;AAAA;;AAK3Ce,QAAAA,KAAK,GAAG;AACJd,UAAAA,QAAQ,CAACe,EAAT,CAAYd,QAAQ,CAACe,mBAArB,EAA0C,KAAKC,OAA/C,EAAwD,IAAxD;AACH;;AAEDA,QAAAA,OAAO,GAAG;AACN,gBAAMC,GAAG,GAAG,KAAKC,IAAL,CAAUC,aAAtB;AACA,gBAAMC,OAAO,GAAG,CAAhB,CAFM,CAEY;;AAClB,cAAIC,CAAC,GAAGJ,GAAG,CAACI,CAAZ;AACAlB,UAAAA,IAAI,CAACmB,IAAL,CAAUf,MAAM,CAACgB,CAAjB,EAAoBN,GAApB;AACAV,UAAAA,MAAM,CAACgB,CAAP,CAASF,CAAT,IAAcD,OAAd;;AACA,cAAInB,aAAa,CAACuB,QAAd,CAAuBC,cAAvB,CAAsClB,MAAtC,EAA8C,KAAKmB,KAAnD,EAA0D,GAA1D,CAAJ,EAAoE;AAChEL,YAAAA,CAAC,GAAGpB,aAAa,CAACuB,QAAd,CAAuBG,oBAAvB,CAA4CC,QAA5C,CAAqDP,CAAzD;AACH;;AACDd,UAAAA,MAAM,CAACgB,CAAP,CAASF,CAAT,GAAaA,CAAb;AACA,eAAKH,IAAL,CAAUC,aAAV,GAA0BZ,MAAM,CAACgB,CAAjC;AACH;;AApB0C,O;;;;;iBAGb,C","sourcesContent":["\nimport { _decorator, Component, Node, director, Director, PhysicsSystem, geometry, Vec3, physics } from 'cc';\nconst { ccclass, property } = _decorator;\nconst tmpRay = geometry.Ray.create(0, 0, 0, 0, -1, 0);\n@ccclass('VerticalRaycast')\nexport class VerticalRaycast extends Component {\n\n    @property({ type: physics.PhysicsGroup })\n    group: physics.PhysicsGroup = 0;\n\n    start() {\n        director.on(Director.EVENT_AFTER_PHYSICS, this.raycast, this);\n    }\n\n    raycast() {\n        const pos = this.node.worldPosition;\n        const offsetY = 1;//默认为1;\n        let y = pos.y;\n        Vec3.copy(tmpRay.o, pos);\n        tmpRay.o.y += offsetY;\n        if (PhysicsSystem.instance.raycastClosest(tmpRay, this.group, 1.2)) {\n            y = PhysicsSystem.instance.raycastClosestResult.hitPoint.y;\n        }\n        tmpRay.o.y = y;\n        this.node.worldPosition = tmpRay.o;\n    }\n}\n"]}