{"version":3,"sources":["file:///Users/ykq/Downloads/archero/assets/script/framework/playerData.ts"],"names":["_decorator","Component","util","constant","localConfig","StorageManager","clientEvent","ccclass","property","playerData","loadGlobalCache","userId","instance","getUserId","_userId","loadFromCache","_playerInfo","_loadDataByKey","LOCAL_CACHE","PLAYER","_history","HISTORY","_settings","SETTINGS","keyName","ret","str","getConfigData","JSON","parse","e","createPlayerInfo","loginData","diamond","gold","key","level","highestLevel","arrSkill","createDate","Date","_isNewBee","savePlayerInfoToLocalCache","generateRandomAccount","now","getRandomInt","setUserId","saveAccount","setConfigData","stringify","saveSettingsToLocalCache","saveAll","setConfigDataWithoutSave","DATA_VERSION","_dataVersion","updatePlayerInfo","value","isChanged","hasOwnProperty","getSetting","setSetting","clear","addFightTimes","times","fightTimes","getFightTimes","SETTINGS_KEY","FIGHT_TIMES","getLockPlyerSkill","getTableArr","arrLock","filter","item","playerInfo","includes","ID","PLAYER_SKILL","RECOVERY","addPlayerSkill","info","push","dispatchEvent","EVENT_TYPE","PARSE_PLAYER_SKILL","reducePlayerSkill","idx","findIndex","splice","v","length","_instance"],"mappings":"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","sourcesContent":["import { util } from './util';\nimport { _decorator, Component } from \"cc\";\nimport { constant } from \"./constant\";\nimport { localConfig } from \"./localConfig\";\nimport { StorageManager } from \"./storageManager\";\nimport { clientEvent } from './clientEvent';\n\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"playerData\")\nexport class playerData extends Component {\n    /* class member could be defined like this */\n    // dummy = '';\n\n    static _instance: playerData;\n    \n\n    public static get instance () {\n        if (this._instance) {\n            return this._instance;\n        }\n\n        this._instance = new playerData();\n        return this._instance;\n    }\n\n    public serverTime: number = 0;\n    public localTime: number = 0;\n\n    private _userId: string = '';\n    private _playerInfo: any = null;\n    private _history: any = null;\n    private _settings: any = null;\n    private _isNewBee: boolean = false;    //默认非新手\n    private _dataVersion: string = '';\n\n    public get userId () {\n        return this._userId;\n    }\n\n    public set userId (v: string) {\n        this._userId = v;\n    }\n\n    public get settings () {\n        return this._settings;\n    }\n\n    public set settings (v: any) {\n        this._settings = v;\n    }\n\n    public get playerInfo () {\n        return this._playerInfo;\n    }\n\n    public set playerInfo (v: any) {\n        this._playerInfo = v;\n    }\n\n    public get history () {\n        return this._history;\n    }\n\n    public set history (v: any) {\n        this._history = v;\n    }\n\n    public get isNewBee () {\n        return this._isNewBee;\n    }\n\n    public set isNewBee (v: boolean) {\n        this._isNewBee = v;\n    }\n\n    //是否已经解锁完成所有技能\n    public get isPlayerSkillAllUnlock () {\n        let arrSkill = localConfig.instance.getTableArr(\"playerSkill\");\n        //生命回复技能不在技能列表里面出现，而是在游戏内多次出现，所以减去1\n        return this.playerInfo.arrSkill.length === arrSkill.length - 1;\n    }\n\n    /**\n     * 加上用户数据\n     */\n    public loadGlobalCache() {\n        let userId: string = StorageManager.instance.getUserId();\n        if (userId) {\n            this._userId = userId;\n        }\n    }\n\n    /**\n     * 加载本地存储数据\n     */\n    public loadFromCache() {\n        //读取玩家基础数据\n        this._playerInfo = this._loadDataByKey(constant.LOCAL_CACHE.PLAYER);\n        this._history = this._loadDataByKey(constant.LOCAL_CACHE.HISTORY);\n        this._settings = this._loadDataByKey(constant.LOCAL_CACHE.SETTINGS);\n    }\n\n    /**\n     * 获取本地存储数据\n     * @param {string}keyName \n     * @returns \n     */\n    private _loadDataByKey (keyName: any) {\n        let ret = {};\n        let str = StorageManager.instance.getConfigData(keyName);\n        if (str) {\n            try {\n                ret = JSON.parse(str);\n            } catch (e) {\n                ret = {};\n            }\n        } \n        \n        return ret;\n    }\n\n    /**\n     * 创建角色数据\n     * @param loginData \n     */\n    public createPlayerInfo(loginData?:any) {\n        this._playerInfo = {\n            diamond: 0, //钻石总数\n            gold: 0,//金币数量\n            key: 0, //钥匙数量\n            level: 1,  //当前层级\n            highestLevel: 1,//已经解锁的最高层级\n            arrSkill:[],//已经解锁的玩家技能ID\n            createDate: new Date(), //记录创建时间\n        };\n        \n        this._isNewBee = true; //区分新老玩家\n\n        if (loginData) {\n            for (let key in loginData) {\n                this._playerInfo[key] = loginData[key];\n            }\n        }\n\n        this.savePlayerInfoToLocalCache();\n    }\n\n    /**\n     * 生成随机账户\n     * @returns\n     */\n     public generateRandomAccount () {\n        this.userId = `${Date.now()}${util.getRandomInt(0, 1000)}`;\n        StorageManager.instance.setUserId(this._userId);\n    }\n\n    /**\n     * 存用户数据\n     * @param userId \n     */\n    public saveAccount(userId: any) {\n        this._userId = userId;\n        StorageManager.instance.setUserId(userId);\n    }\n\n    /**\n     * 保存玩家数据\n     */\n     public savePlayerInfoToLocalCache() {\n        StorageManager.instance.setConfigData(constant.LOCAL_CACHE.PLAYER, JSON.stringify(this._playerInfo));\n    }\n    \n    /**\n     * 保存玩家设置相关信息\n     */\n    public saveSettingsToLocalCache () {\n        StorageManager.instance.setConfigData(constant.LOCAL_CACHE.SETTINGS, JSON.stringify(this._settings));\n    }\n\n    /**\n     * 当数据同步完毕，即被覆盖的情况下，需要将数据写入到本地缓存，以免数据丢失\n     */\n     public saveAll() {\n        StorageManager.instance.setConfigDataWithoutSave(constant.LOCAL_CACHE.PLAYER, JSON.stringify(this._playerInfo));\n        StorageManager.instance.setConfigDataWithoutSave(constant.LOCAL_CACHE.HISTORY, JSON.stringify(this._history));\n        StorageManager.instance.setConfigDataWithoutSave(constant.LOCAL_CACHE.SETTINGS, JSON.stringify(this._settings));\n        StorageManager.instance.setConfigData(constant.LOCAL_CACHE.DATA_VERSION, this._dataVersion);\n    }\n\n    /**\n     * 更新用户信息\n     * 例如钻石、金币、道具\n     * @param {String} key\n     * @param {Number} value\n     */\n    public updatePlayerInfo(key:string, value: any) {\n        let isChanged: boolean= false;\n        if (this._playerInfo.hasOwnProperty(key)) {\n            if (typeof value === 'number') {\n                isChanged = true;\n                this._playerInfo[key] += value;\n                if (this._playerInfo[key] < 0) {\n                    this._playerInfo[key] = 0;\n                }\n                //return;\n            } else if (typeof value === 'boolean' || typeof value === 'string') {\n                isChanged = true;\n                this._playerInfo[key] = value;\n            }\n        }\n        if (isChanged) {\n            //有修改就保存到localcache\n            StorageManager.instance.setConfigData(constant.LOCAL_CACHE.PLAYER, JSON.stringify(this._playerInfo));\n        }\n    }\n    \n    /**\n     * 获取玩家杂项值\n     * @param {string} key \n     */\n    public getSetting (key: string) {\n        if (!this._settings) {\n            return null;\n        }\n\n        if (!this._settings.hasOwnProperty(key)) {\n            return null;\n        }\n\n        return this._settings[key];\n    }\n\n    /**\n     * 设置玩家杂项值\n     * @param {string} key \n     * @param {*} value \n     */\n    public setSetting (key: string, value: any) {\n        if (!this._settings) {\n            this._settings = {};\n        }\n\n        this._settings[key] = value;\n\n        this.saveSettingsToLocalCache();\n    }\n\n    /**\n     * 清除用户信息\n     */\n    public clear () {\n        this._playerInfo = {};\n        this._settings = {};\n        this.saveAll();\n    }\n\n    /**\n     * 增加战斗次数\n     * @param times \n     */\n    public addFightTimes (times: number = 1) {\n        let fightTimes = this.getFightTimes();\n\n        fightTimes += 1;\n        this.setSetting(constant.SETTINGS_KEY.FIGHT_TIMES, fightTimes);\n    }\n\n    /**\n     * 获取战斗次数\n     * @returns \n     */\n    public getFightTimes () {\n        let fightTimes = this.getSetting(constant.SETTINGS_KEY.FIGHT_TIMES);\n\n        if (!fightTimes) {\n            fightTimes = 0;\n            this.setSetting(constant.SETTINGS_KEY.FIGHT_TIMES, 0);\n        } \n\n        return fightTimes;\n    }\n\n    /**\n     * 获取未解锁的玩家技能\n     *\n     * @memberof playerData\n     */\n    public getLockPlyerSkill (): [] {\n        let arrSkill = localConfig.instance.getTableArr(\"playerSkill\");\n        let arrLock: any = [];\n\n        arrLock = arrSkill.filter((item: any)=>{\n            return !this.playerInfo.arrSkill.includes(item.ID) && (item.ID !== constant.PLAYER_SKILL.RECOVERY);\n        })\n\n        return arrLock;\n    }\n\n    /**\n     * 添加玩家某项技能\n     *\n     * @param {*} info\n     * @memberof playerData\n     */\n    public addPlayerSkill (info: any) {\n        if (!this.playerInfo.arrSkill.includes(info.ID)) {\n            this.playerInfo.arrSkill.push(info.ID);\n            this.savePlayerInfoToLocalCache();\n            clientEvent.dispatchEvent(constant.EVENT_TYPE.PARSE_PLAYER_SKILL);\n        }\n    }\n\n    /**\n     * 删除玩家某项技能\n     *\n     * @param {*} info\n     * @memberof playerData\n     */\n    public reducePlayerSkill (info: any) {\n        if (this.playerInfo.arrSkill.includes(info.ID)) {\n            let idx = this.playerInfo.arrSkill.findIndex((item: number)=>{ return item === info.ID});\n            this.playerInfo.arrSkill.splice(idx, 1);\n\n            // this.reduceValueChangeSkill(info.ID);\n\n            this.savePlayerInfoToLocalCache();\n            clientEvent.dispatchEvent(constant.EVENT_TYPE.PARSE_PLAYER_SKILL);\n        }\n    }\n}\n"]}