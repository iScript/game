{"version":3,"sources":["file:///Users/ykq/Downloads/archero/assets/script/fight/characterRigid.ts"],"names":["_decorator","Component","Vec3","RigidBodyComponent","EPSILON","ColliderComponent","constant","ccclass","property","v3_0","v3_1","ContactPoint","assign","ce","c","isBodyA","getWorldNormalOnB","normal","getWorldPointOnA","point","getWorldNormalOnA","getWorldPointOnB","collider","_ctPool","ContactPool","getContacts","ces","cps","i","length","push","getContact","cp","pop","recyContacts","Array","prototype","call","CharacterRigid","UP","clone","onLoad","_rigidBody","getComponent","_collider","onEnable","on","_onCollision","onDisable","off","start","initSpeed","moveSpeed","ratio","_curMaxSpeed","move","x","z","_stateX","_stateZ","clearVelocity","stopMove","_updateCharacter","dt","updateFunction","onGround","set","normalize","negative","rigidMove","dir","speed","getLinearVelocity","scaleAndAdd","ms","len","lengthSqr","multiplyScalar","setLinearVelocity","_updateContactInfo","_applyGravity","_applyDamping","_saveState","GAME_FRAME","Math","pow","damping","g","gravity","m","mass","applyForce","_velocity","_grounded","_groundContact","wp","node","worldPosition","maxY","offsetY","_contacts","n","p","y","copy","_groundNormal","event","contacts","selfCollider","update","dtS"],"mappings":"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","sourcesContent":["import { constant } from '../framework/constant';\nimport { _decorator, Component, Vec3, RigidBodyComponent, EPSILON, ColliderComponent, ICollisionEvent, IContactEquation, Collider, RigidBody, PhysicsSystem } from 'cc';\n//角色刚体碰撞检测组件\nconst { ccclass, property } = _decorator;\nconst v3_0 = new Vec3();\nconst v3_1 = new Vec3();\n\nclass ContactPoint {\n    point = new Vec3();\n    normal = new Vec3();\n    collider!: Collider;\n    assign (ce: IContactEquation, c: Collider) {\n        if (ce.isBodyA) {\n            ce.getWorldNormalOnB(this.normal);\n            ce.getWorldPointOnA(this.point);\n        } else {\n            (ce as any).getWorldNormalOnA(this.normal);\n            ce.getWorldPointOnB(this.point);\n        }\n        this.collider = c;\n        return this;\n    }\n}\n\nconst _ctPool: ContactPoint[] = [];\nclass ContactPool {\n    static getContacts (ces: IContactEquation[], c: Collider, cps: ContactPoint[]) {\n        for (let i = 0; i < ces.length; i++) {\n            cps.push(this.getContact(ces[i], c));\n        }\n    }\n    static getContact (ce: IContactEquation, c: Collider): ContactPoint {\n        const cp = _ctPool.length > 0 ? _ctPool.pop()! : new ContactPoint();\n        return cp.assign(ce, c);\n    }\n    static recyContacts (cps: ContactPoint[]) {\n        Array.prototype.push.call(_ctPool, ...cps);\n        cps.length = 0;\n    }\n}\n\n@ccclass('CharacterRigid')\nexport class CharacterRigid extends Component {    \n    @property\n    public damping:number = 0.5;//阻尼\n\n    @property\n    public gravity:number = -10;//重力\n\n    private _rigidBody: RigidBodyComponent = null!;\n    private _collider: ColliderComponent = null!;\n    private _grounded = true;//是否着地\n    private _contacts: ContactPoint[] = [];//碰撞接触点\n    private _groundContact: ContactPoint = null!;//与地面碰撞的点\n    private _groundNormal = Vec3.UP.clone();//地面法向量\n    private _velocity = new Vec3();//线性速度\n    private _curMaxSpeed: number = 0;//当前最大速度\n\n    protected _stateX: number = 0;  // 1 positive, 0 static, -1 negative\n    protected _stateZ: number = 0;\n\n    get velocity () { return this._velocity; }\n    get onGround () { return this._grounded; }\n\n    onLoad () {\n        this._rigidBody = this.getComponent(RigidBodyComponent)!;\n        this._collider = this.getComponent(ColliderComponent)!;\n    }\n\n    onEnable () {\n        this._collider.on('onCollisionEnter', this._onCollision, this);\n        this._collider.on('onCollisionStay', this._onCollision, this);\n        this._collider.on('onCollisionExit', this._onCollision, this);\n    }\n\n    onDisable () {\n        this._collider.off('onCollisionEnter', this._onCollision, this);\n        this._collider.off('onCollisionStay', this._onCollision, this);\n        this._collider.off('onCollisionExit', this._onCollision, this);\n    }\n\n    start () {\n      \n    }\n\n    public initSpeed (moveSpeed: number,  ratio: number = 1) {\n        this._curMaxSpeed = moveSpeed * ratio;\n    }\n\n    /**\n     * 角色移动传入x和z\n     *\n     * @param {number} x\n     * @param {number} z\n     */\n    public move (x: number, z: number) {\n        if ((x > 0 && this._stateX < 0) || (x < 0 && this._stateX > 0) || (z > 0 && this._stateZ < 0) || (z < 0 && this._stateZ > 0)) {\n            this.clearVelocity();\n            // console.log(\"方向不一致则清除速度,避免惯性太大\");\n        }\n\n        this._stateX = x;\n        this._stateZ = z;\n        // console.log(\"_stateX\", this._stateX, \"z\", this._stateZ);\n    }\n\n    /**\n     * 刚体停止移动\n     *\n     */\n    public stopMove () {\n        this._stateX = 0;\n        this._stateZ = 0;\n        this.clearVelocity();\n    }\n\n    /**\n     * 更新刚体状态\n     *\n     * @private\n     * @param {number} dt\n     * @return {*} \n     */\n    private _updateCharacter (dt: number) {\n        this.updateFunction(dt);\n\n        if (!this.onGround) return;\n        if (this._stateX || this._stateZ) {\n            v3_0.set(this._stateX, 0, this._stateZ);\n            v3_0.normalize().negative();\n            this.rigidMove(v3_0, 1);\n        }\n    }\n\n    /**\n     * 清除移动速度\n     */\n    public clearVelocity () {\n        this._rigidBody.clearVelocity();\n    }\n\n    /**\n     * 刚体移动\n     *\n     * @param {Vec3} dir\n     * @param {number} speed\n     */\n    public rigidMove (dir: Vec3, speed: number) {\n        this._rigidBody.getLinearVelocity(v3_1);\n        Vec3.scaleAndAdd(v3_1, v3_1, dir, speed);\n\n        const ms = this._curMaxSpeed;\n        const len = v3_1.lengthSqr();\n        if (len > ms) {\n            v3_1.normalize();\n            v3_1.multiplyScalar(ms);\n        }\n        this._rigidBody.setLinearVelocity(v3_1);\n\n        // console.log('setLinearVelocity1' + v3_1);\n    }\n\n    /**\n     * 刷新\n     * @param dt \n     */\n    public updateFunction (dt: number) {\n        // if (GameManager.isGameStart && !GameManager.isGameOver && !GameManager.isGamePause) {\n            this._updateContactInfo();\n            this._applyGravity();\n            this._applyDamping();\n            this._saveState();\n        // }\n    }\n\n    /**\n     * 施加阻尼\n     *\n     * @private\n     * @param {number} [dt=1 / constant.GAME_FRAME]\n     */\n    private _applyDamping (dt = 1 / constant.GAME_FRAME) {\n        this._rigidBody.getLinearVelocity(v3_1);\n        // console.log('getLinearVelocity2' + v3_1);\n        if (v3_1.lengthSqr() > EPSILON) {\n            v3_1.multiplyScalar(Math.pow(1.0 - this.damping, dt));\n            this._rigidBody.setLinearVelocity(v3_1);\n            // console.log('setLinearVelocity2' + v3_1);\n        }\n    }\n\n    /**\n     * 施加重力\n     *\n     * @private\n     */\n    private _applyGravity () {\n        const g = this.gravity;\n        const m = this._rigidBody.mass;\n        v3_1.set(0, m * g, 0);\n        this._rigidBody.applyForce(v3_1)\n    }\n\n    /**\n     * 获取线性速度\n     *\n     * @private\n     */\n    private _saveState () {\n        this._rigidBody.getLinearVelocity(this._velocity);\n        // console.log('getLinearVelocity3' + this._velocity  + \":\" + this._grounded);\n    }\n\n    /**\n     * 更新碰撞信息，判断是否角色着地\n     *\n     * @private\n     */\n    private _updateContactInfo () {\n        this._grounded = false;\n        this._groundContact = null!;\n        const wp = this.node.worldPosition;\n        let maxY = -0.001;\n        let offsetY = 0.5;//默认为0.1\n        for (let i = 0; i < this._contacts.length; i++) {\n            const c = this._contacts[i];\n            const n = c.normal, p = c.point;\n            if (n.y <= 0.0001) continue;\n            else {\n                if (n.y > maxY && p.y > wp.y - offsetY) {\n                    this._grounded = true;\n                    maxY = n.y;\n                    this._groundContact = c;\n                }\n            }\n        }\n        if (this._grounded) {\n            Vec3.copy(this._groundNormal, this._groundContact.normal);\n        } else {\n            Vec3.copy(this._groundNormal, Vec3.UP);\n            // console.log(\"没着地\", this.node.name);\n        }\n        ContactPool.recyContacts(this._contacts);\n    }\n\n    /**\n     * 检测碰撞，收集碰撞信息\n     *\n     * @private\n     * @param {ICollisionEvent} event\n     */\n    private _onCollision (event: ICollisionEvent) {\n        ContactPool.getContacts(event.contacts, event.selfCollider, this._contacts);\n    }\n\n    update (dtS: number) {\n        const dt = 1000 / constant.GAME_FRAME;\n        this._updateCharacter(dt);\n    }\n}"]}